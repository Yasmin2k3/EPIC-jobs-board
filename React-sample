import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { GripVertical, MapPin, Users, Star, Calendar, Check } from "lucide-react";

export const FinalRankingsTab = () => {
  const [allocatedCompanies] = useState([
    {
      id: 1,
      name: "Mayo Clinic",
      location: "Rochester, MN",
      specialty: "Internal Medicine",
      interviewDate: "March 15, 2024",
      interviewCompleted: true,
      rating: 4.9
    },
    {
      id: 2,
      name: "Johns Hopkins Hospital",
      location: "Baltimore, MD",
      specialty: "Internal Medicine",
      interviewDate: "March 22, 2024",
      interviewCompleted: true,
      rating: 4.8
    },
    {
      id: 3,
      name: "Massachusetts General Hospital",
      location: "Boston, MA",
      specialty: "Internal Medicine",
      interviewDate: "March 29, 2024",
      interviewCompleted: false,
      rating: 4.7
    }
  ]);

  const [finalRankings, setFinalRankings] = useState(allocatedCompanies);
  const [isSubmitted, setIsSubmitted] = useState(false);

  const handleDragEnd = (result: any) => {
    if (!result.destination) return;

    const items = Array.from(finalRankings);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);

    setFinalRankings(items);
  };

  const handleSubmit = () => {
    setIsSubmitted(true);
  };

  const completedInterviews = allocatedCompanies.filter(c => c.interviewCompleted).length;

  const renderStars = (rating: number) => {
    const stars = [];
    const fullStars = Math.floor(rating);
    
    for (let i = 0; i < fullStars; i++) {
      stars.push(<Star key={i} size={14} className="fill-yellow-400 text-yellow-400" />);
    }
    for (let i = stars.length; i < 5; i++) {
      stars.push(<Star key={i} size={14} className="text-gray-300" />);
    }
    
    return stars;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center">
        <h2 className="text-2xl font-semibold text-gray-900 mb-2">Final Rankings</h2>
        <p className="text-gray-600">Rank your 3 allocated programs from most preferred (1) to least preferred (3)</p>
      </div>

      {/* Interview Progress */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="font-medium text-blue-900">Interview Progress</p>
              <p className="text-sm text-blue-700">Complete all interviews before submitting final rankings</p>
            </div>
            <div className="text-right">
              <p className="text-2xl font-bold text-blue-900">{completedInterviews}/3</p>
              <p className="text-sm text-blue-700">interviews completed</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Status Alert */}
      {isSubmitted ? (
        <Alert className="bg-green-50 border-green-200">
          <Check className="h-4 w-4 text-green-600" />
          <AlertDescription className="text-green-800">
            Your final rankings have been submitted! The Gale-Shapley matching algorithm will run after all students submit their rankings.
          </AlertDescription>
        </Alert>
      ) : completedInterviews < 3 ? (
        <Alert className="bg-yellow-50 border-yellow-200">
          <Calendar className="h-4 w-4 text-yellow-600" />
          <AlertDescription className="text-yellow-800">
            You still have {3 - completedInterviews} interview(s) pending. Complete all interviews before submitting final rankings.
          </AlertDescription>
        </Alert>
      ) : null}

      {/* Allocated Programs */}
      <Card className="bg-white shadow-sm">
        <CardHeader>
          <CardTitle>Your Allocated Programs - Rank 1 to 3</CardTitle>
        </CardHeader>
        <CardContent>
          <DragDropContext onDragEnd={handleDragEnd}>
            <Droppable droppableId="finalRankings">
              {(provided) => (
                <div {...provided.droppableProps} ref={provided.innerRef} className="space-y-4">
                  {finalRankings.map((company, index) => (
                    <Draggable key={company.id} draggableId={company.id.toString()} index={index}>
                      {(provided, snapshot) => (
                        <div
                          ref={provided.innerRef}
                          {...provided.draggableProps}
                          className={`p-6 bg-gray-50 rounded-lg border-2 transition-colors ${
                            snapshot.isDragging ? 'border-blue-300 bg-blue-50' : 'border-transparent'
                          }`}
                        >
                          <div className="flex gap-4">
                            <div
                              {...provided.dragHandleProps}
                              className="text-gray-400 hover:text-gray-600 cursor-grab mt-2"
                            >
                              <GripVertical size={20} />
                            </div>
                            
                            <div className="flex items-center justify-center w-10 h-10 bg-blue-100 text-blue-800 font-bold rounded-full text-lg mt-1">
                              #{index + 1}
                            </div>
                            
                            <div className="flex-1">
                              <div className="flex items-start justify-between mb-2">
                                <h4 className="font-semibold text-gray-900 text-lg">{company.name}</h4>
                                <div className="flex items-center gap-3">
                                  <div className="flex items-center gap-1">
                                    {renderStars(company.rating)}
                                    <span className="text-sm text-gray-600">({company.rating})</span>
                                  </div>
                                  <Badge className={company.interviewCompleted ? "bg-green-100 text-green-800" : "bg-yellow-100 text-yellow-800"}>
                                    {company.interviewCompleted ? "Interview Complete" : "Interview Pending"}
                                  </Badge>
                                </div>
                              </div>
                              
                              <div className="flex flex-wrap gap-4 text-sm text-gray-600">
                                <div className="flex items-center gap-1">
                                  <MapPin size={14} />
                                  {company.location}
                                </div>
                                <div className="flex items-center gap-1">
                                  <Calendar size={14} />
                                  Interview: {company.interviewDate}
                                </div>
                                <Badge className="bg-blue-100 text-blue-800">
                                  {company.specialty}
                                </Badge>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </Draggable>
                  ))}
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          </DragDropContext>
        </CardContent>
      </Card>

      {/* Action Buttons */}
      <div className="flex justify-center gap-4">
        <Button variant="outline" disabled={isSubmitted}>Save Draft</Button>
        <Button 
          onClick={handleSubmit} 
          disabled={isSubmitted || completedInterviews < 3}
          className="bg-green-600 hover:bg-green-700"
        >
          {isSubmitted ? 'Final Rankings Submitted' : 'Submit Final Rankings'}
        </Button>
      </div>
  );
};
